on: push
name: Test, Build and Release apk and ios IPA
jobs:
  build:
    name: Generate the build
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Set up App Store Connect
        run: |
          echo "${{ secrets.APP_STORE_CONNECT }}" | base64 --decode > ios/app_store_connect.json

      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          rubygems: latest

      - name: Build and Deploy
        run: |
            @echo "â•  Sending iOS Build to TestFlight..."
            cd ios && bundle install
            cd ios/fastlane && bundle exec fastlane deploy


        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.GIT_BASIC_AUTHORIZATION }}








#     # Install the Apple certificate and provisioning profile
#     - name: Install the Apple certificate and provisioning profile
#       env:
#         BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
#         P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
#         BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
#         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#       run: |
#         # create variables
#         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#         PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#         # import certificate and provisioning profile from secrets
#         echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#         echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
#         # create temporary keychain
#         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#         # import certificate to keychain
#         security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#         security list-keychain -d user -s $KEYCHAIN_PATH
#         # apply provisioning profile
#         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#         cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

#
#      - uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: '3.1.2'
#      - name: Install Fastlane
#        run: cd ios && bundle install && cd ..
#      - name: Install packages
#        run: flutter pub get
#      - name: Install pods
#        run: cd ios && pod install && cd ..
#      - name: Prebuild
#        run: flutter build ios --release --no-codesign

#      - name: Execute Fastlane command
#        run: cd ios && fastlane release type:github
#        timeout-minutes: 40



#       # Install your project's dependencies
#      - run: flutter pub get
#
#      # Build and sign the ipa using a single flutter command
#      - name: Building IPA
#        run:  flutter build ios --release --no-codesign
#      # Manually sign the app using xcodebuild
#      # Collect the file and upload as artifact
#      #- name: Collect IPA artifacts
#      #  uses: actions/upload-artifact@v2
#      #  with:
#      #    name: release-ipa
#      #    path: build/ios/iphoneos/Runner.app
#      - name: Collect IPA artifacts
#        run: |
#          cd build/ios/iphoneos
#          zip -r Runner.zip Runner.app
#          # Upload the zip file as the artifact
#      - name: Upload IPA artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: release-ipa
#          path: build/ios/iphoneos/Runner.zip
#
#
#
#      - name: Create Release
#        uses: ncipollo/release-action@v1.12.0
#        with:
#          artifacts: "build/ios/iphoneos/Runner.zip"
#          token: ${{ secrets.TOKEN }}
#          tag: refs/tags/v1.31
#
#
#
#      - name: Get current version
#        id: get_version
#        run: echo "::set-output name=version::$(cat $GITHUB_WORKSPACE/.github/workflows/version.txt)"
#
#      - name: Generate new version number
#        id: generate_version
#        run: |
#          current_version=${{ steps.get_version.outputs.version }}
#          if [ -z "$current_version" ]; then
#            current_version="1.0.1"
#          fi
#          new_version=$(bash $GITHUB_WORKSPACE/.github/workflows/increment_version.sh $current_version)
#
#          echo "::set-output name=new_version::$new_version"
#
#      - name: Update version file
#        run: |
#          echo "${{ steps.generate_version.outputs.new_version }}" > $GITHUB_WORKSPACE/.github/workflows/version.txt
#
#
#
#
#
#
#        # preparing for IPA upload on testflight
#      - name: Install Fastlane
#        run: |
#          gem install bundler
#          bundle install
#          bundle exec fastlane install_plugins
#
#      - name: Upload to TestFlight
#        run: |
#          bundle exec fastlane deliver --ipa "build/ios/iphoneos/Runner.zip" --skip_screenshots
#
#
#      - name: Clean up keychain and provisioning profile
#        if: ${{ always() }}
#        run: |
#          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
#          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
#

