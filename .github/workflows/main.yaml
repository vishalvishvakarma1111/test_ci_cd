on: push
name: Test, Build and Release apk and ios IPA
jobs:
  build:
    name: Generate the build
# Upload android build ,app bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.7.12'

      - name: Print json file

        run: |
          echo "${{ secrets.ANDROID_PLAYSTORE_SECRET }}" | base64 --decode > android/fastlane/service_account.json
          cat android/fastlane/service_account.json
          


      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: key.jks
          encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties



     # ruby install
      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          rubygems: latest

      - name: Install dependencies
        run: |
          cd android
          bundle install


      - name: Build Android App Bundle

        run: |
          echo "${{ secrets.ANDROID_PLAYSTORE_SECRET }}" | base64 --decode > android/fastlane/service_account.json
          cat android/fastlane/service_account.json
          flutter clean
          flutter pub get
          flutter build appbundle
          cd android
          bundle exec fastlane deploy
       
          

#    ios build workflow
#    runs-on: macos-latest
#    steps:
#      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - uses: actions/checkout@v1
#      - uses: actions/setup-java@v1
#        with:
#          java-version: '12.x'
#      - uses: subosito/flutter-action@v1
#        with:
#          flutter-version: '3.7.12'
#
#
#      # Install the Apple certificate and provisioning profile
#      - name: Install the Apple certificate and provisioning profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
#          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#          # import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          # import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#      # Install your project's dependencies
#      - run: flutter pub get
#
#      # pods install
#      - name: Pods install
#        run: cd ios &&  pod install && cd ..
#
#      # Build ios app
#      - name: Building IPA
#        run:  flutter build ios --release --no-codesign
#
#
#      - name: Collect IPA artifacts
#        run: |
#          cd build/ios/iphoneos
#          zip -r Runner.zip Runner.app
#          # Upload the zip file as the artifact
#
#      - name: Upload IPA artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: release-ipa
#          path: build/ios/iphoneos/Runner.zip
#
#      # ruby install
#      - name: Setup Fastlane
#        uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: 2.6
#          rubygems: latest
#
#
#  # flutter clean, build and bundle install
#      - name: Install dependencies and build iOS app
#        run: |
#          flutter clean
#          flutter pub get
#          cd ios
#          pod install
#          bundle install
#
#
#      # fastlane execution
#      - name: Build and Deploy
#        run: |
#          cd ios
#          bundle exec fastlane gym --verbos
#          bundle exec fastlane deploy
#
#        env:
#          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.GIT_BASIC_AUTHORIZATION }}
#
#
#      - name: Clean up keychain and provisioning profile
#        if: ${{ always() }}
#        run: |
#          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
#          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
#
#
#
