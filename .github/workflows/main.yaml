on: push
name: Test, Build and Release apk and ios IPA
jobs:
  build:
    name: Generate the build
    runs-on: macos-latest
    steps:
      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.7.12'


      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      # Install your project's dependencies
      - run: flutter pub get

      # Build and sign the ipa using a single flutter command
      - name: Pods install
        run: cd ios &&  pod install && cd ..


      - name: Building IPA
        run:  flutter build ios --release --no-codesign
      # Manually sign the app using xcodebuild
      # Collect the file and upload as artifact
      #- name: Collect IPA artifacts
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: release-ipa
      #    path: build/ios/iphoneos/Runner.app
      - name: Collect IPA artifacts
        run: |
          cd build/ios/iphoneos
          zip -r Runner.zip Runner.app
          # Upload the zip file as the artifact
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          path: build/ios/iphoneos/Runner.zip

      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          rubygems: latest
      - name: Install dependencies and build iOS app
        run: |
          flutter clean
          flutter pub get
          cd ios
          pod install
          bundle install
      - name: Build and Deploy
        run: |
          cd ios
          bundle exec fastlane gym --verbose
         
          bundle exec fastlane deploy

        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.GIT_BASIC_AUTHORIZATION }}


#      - name: Create Release
#        uses: ncipollo/release-action@v1.12.0
#        with:
#          artifacts: "build/ios/iphoneos/Runner.zip"
#          token: ${{ secrets.TOKEN }}
#          tag: refs/tags/v1.19

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision        



